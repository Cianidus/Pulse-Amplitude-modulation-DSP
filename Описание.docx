Для определения времени между импульсами, был применен метод нахождения взаимной корреляции. Таким образом можно надежно детектировать необходимые нам импульсы и рассчитывать интервал между ними.

Первоначально данный метод был промоделирован в matlab. Для упрощения вычисления  в этом скрипте не соблюден масштаб в соответствии с ТЗ. В данном скрипте формируется Амплитудно-импульсный сигнал pam, формируется импульсная характеристика фильтра triangle pulse (Единичный треугольный импульс модулирующего сигнала). 
Скрипт выводит 4 графика: модулирующие импульсы, PAM-сигнал, коэффициент корреляции, отметки максимального значения коэффициента корреляции по порядку; также выводит интересующее нас время между импульсами period, равный 8,1мс, которое совпадает с заданным интервалом импульсов(~8000 отсчетов с периодом 1мкс).
Для формирования сигнала в виде данных, лежащих в ROM-памяти  fpga-проекта, с помощью matlab скрипта “generate_data.m”, pam-сигнал записан в файл инициализации данных памяти “pam_data.mif”.

	FPGA-проект структурно состоит из генератора сигнала в виде ROM-памяти и драйвера для нее, КИХ-фильтра для вычисления взаимной корреляции,  модуля вычисления времени между сигналами и фазы между амплитудой и точкой, являющейся 0.6 от амплитуды.
	Подробное описание работы.
	Управляющий драйвер sg_driver формирует интервалы опроса памяти signal_generator, таким образом генерируется pam-сигнал с характеристиками, заданными в ТЗ. 
	Данный сигнал поступает на вход КИХ-фильтра(взята сторонняя реализация фильтра с модификацией под текущий проект). Весовые коэффициенты представлены эталонным импульсом являющимся результатом демодуляции pam-сигнала.  
	КИХ-фильтр вычисляет коэффициент корреляции. Далее коэффициент поступает на вход вычислительного модуля mov_av. В данном модуле точка перегиба, означающая максимальное значение коэффициента корреляции высчитывается скользящим средним. Необходимые нам, точки максимума стробируются сигналом time_point. Точки, ограничивающие интервал между максимумом и 0.6 от максимума, стробируются сигналом phase_mark. Таймеры считают интервалы между стробами и таким образом выдают необходимое нам время между импульсами и фазу. 

	Порядок работы с проектом.
	1) Запустить скрипт PAM.m
	2) Если отсутствует .mif файл, запустить скрипт  generate_data.m
	3) Запустить скрипт симуляции в modelsim make.do. Возможен некорректный масштаб отображения сигналов xcross_inst/in,  xcross_inst/in. Для этого следует нажать правой кнопкой по сигналу, Format → Analog(automatic).

После симуляции в консоли modelsim будут выведены результаты вычисления.
Данный проект задействует около 10к логических элементов, 100 аппаратных умножителей (Задается специальной директивой для компилятора. Без аппаратных умножителей количество LE увеличится до 13к), максимальная частота работы около 13МГц (Достаточно при частоте выборки АЦП — 1MSPS. 
По данным требованиям ресурсов и производительности подходит любой средний  FPGA с достаточным количеством аппаратных умножителей и количеством LE не менее 20к. Например: Spartan-XC6SLX75T, Сyclone EP4CE40.
Структура проекта:
    1)FPGA
        1.1 filter.v - КИХ-фильтр
        1.2 mov_av.v — Вычислительный модуль
        1.3 sg_driver.v — драйвер памяти
        1.4 signal_generator.v — память 
        1.5 top_signal.v — топ модуль для драйвера и памяти 
        1.6 top_corr.v — топ модуль проекта
        1.7 tb_corr.v — тестовый стенд
        1.8 pam_data.mif — данные для памяти
	1.9 make.do – скрипт симуляции Modelsim

    2)Matlab
	2.1 PAM.m – скрипт модели 
	2.2 generate_data.m — скрипт генерации данных для ROM
